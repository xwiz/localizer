using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Localizer
{
    public partial class Form1 : Form
    {
        private Dictionary<string, string> duplicates;
        private Dictionary<string, List<string>> files;
        private Dictionary<string, string[]> found;
        private Dictionary<string, string> variables;

        public Form1()
        {
            InitializeComponent();
        }
        
        private string directoryName;

        private void button1_Click(object sender, EventArgs e)
        {
            if (buttonLoad.Text != "Localize")
            {
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    dataGridView1.Rows.Clear();
                    variables = new Dictionary<string, string>();
                    duplicates = new Dictionary<string, string>();
                    files = new Dictionary<string, List<string>>();
                    found = new Dictionary<string, string[]>();
                    directoryName = Path.GetDirectoryName(ofd.FileName);
                    if (directoryName == null) return;
                    foreach (string s in Directory.GetFiles(directoryName, "*.cs"))
                    {
                        if (checkBox1.Checked && s.EndsWith("Designer.cs"))
                        {
                            continue;
                        }
                        string tempName = Path.GetFileNameWithoutExtension(s);
                        string allText = File.ReadAllText(s);
                        string[] splits = allText.Split('"');
                        found.Add(s, splits);
                        int last = 0;
                        for (int i = 1; i < splits.Length; i += 2)
                        {
                            try
                            {
                                string txt = splits[i];
                                //we don't need paths, links or empty strings
                                if (txt.Trim() == String.Empty || txt.Contains(":\\") || txt.StartsWith("http:"))
                                    continue;
                                int fi = allText.IndexOf('"' + txt + '"', last, StringComparison.Ordinal);
                                last = fi + txt.Length;
                                int index = allText.LastIndexOf('=', fi);
                                int sindex = allText.LastIndexOf(" ", index, StringComparison.Ordinal);
                                var sb = new StringBuilder();
                                switch (allText[fi - 1])
                                {
                                    case '\'':
                                        i -= 1; //account for fake trail
                                        continue; //this is probably a character, not a string. get out...
                                    case '@':
                                        txt = "@" + txt;
                                        allText = allText.Remove(fi - 1, 1);
                                        break;
                                }

                                for (int t = sindex;; t--)
                                {
                                    if (Char.IsLetter(allText[t]))
                                    {
                                        sb.Append(allText[t]);
                                    }
                                    else
                                    {
                                        if (allText[t] == '/' || allText[t] == '<')
                                        {
                                            sb.Clear(); //comment zone, let's get out
                                            break;
                                        }
                                        if (allText[t] == '.')
                                        {
                                            continue;
                                        }
                                        if (sb.Length != 0)
                                            break;
                                    }
                                }
                                if (sb.Length == 0) continue;
                                char[] array = sb.ToString().Trim().ToCharArray();
                                Array.Reverse(array);
                                string varname = tempName + new string(array) + txt.Split(' ')[0].CleanString().Replace(".","");
                                while (variables.ContainsKey(varname))
                                {
                                    varname += 1;
                                }
                                if (variables.ContainsValue(txt))
                                {
                                    if (!duplicates.ContainsKey(txt))
                                        duplicates.Add(txt, variables.First(n => n.Value == txt).Key);
                                }
                                variables.Add(varname, txt);
                                if (files.ContainsKey(s))
                                {
                                    files[s].Add(varname);
                                }
                                else
                                {
                                    files.Add(s, new List<string>(new[] {varname}));
                                }
                                progressBar1.Value = Convert.ToInt32((i + 0.0D)/splits.Length*100);
                                dataGridView1.Rows.Add(new object[] {varname, txt});
                            }
                            catch (ArgumentOutOfRangeException)
                            {
                            }
                        }
                    }
                    buttonLoad.Text = "Localize";
                }
            }
            else
            {
                string namesp = "Globalizer";
                var document = new XmlDocument();
                var ns = new XmlNamespaceManager(document.NameTable);
                ns.AddNamespace("msbld", "http://schemas.microsoft.com/developer/msbuild/2003");
                document.Load(ofd.FileName);
                if (document.DocumentElement != null)
                {
                    XmlNode node = document.DocumentElement.SelectSingleNode("//msbld:RootNamespace", ns);
                    if (node != null)
                    {
                        namesp = node.InnerText;
                    }
                }
                variables.Clear();
                foreach (DataGridViewRow row in dataGridView1.Rows)
                {
                    if (row.Cells[0].Value == null || row.Cells[1].Value == null) continue;
                    variables.Add(row.Cells[0].Value.ToString(), row.Cells[1].Value.ToString());
                }
                foreach (var entry in files)
                {
                    string newText = File.ReadAllText(entry.Key);
                    foreach (string dvar in entry.Value)
                    {
                        if (variables.ContainsKey(dvar))
                        {
                            newText = newText.Replace('"' + variables[dvar] + '"', "Localizer.myLocalizer." + dvar);
                        }
                    }
                    File.Copy(entry.Key, entry.Key + ".backup");
                    File.WriteAllText(entry.Key, newText);
                }
                #region Spoiler Write Localizer
                File.WriteAllText(directoryName + "\\Localizer.cs",
 string.Format(@"using System;
using System.IO;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace {0}
{{
    /// <summary>
    /// Provides a model for localizing application
    /// </summary>
    public class Localizer
    {{
        /// <summary>
        /// Default constructor
        /// </summary>
        public Localizer()
        {{
            Language = ""en"";
        }}

        /// <summary>
        /// Public constructor for Localizer with default language initialization
        /// </summary>
        /// <param name=""lang"">The language key to intialize</param>
        public Localizer(string lang)
        {{
            Language = lang;
        }}

        private static Localizer _localizer;

        internal static Localizer myLocalizer
        {{
            set {{ _localizer = value; }}
            get {{ return _localizer; }}
        }}

        /// <summary>
        /// Contains the current language
        /// </summary>
        public static string Language;

        /// <summary>
        /// Serializes the language resources file
        /// </summary>
        /// <param name=""locals"">The language resource object to serialize</param>
        public void Serialize(Localizer locals)
        {{
            try
            {{
                var xs = new XmlSerializer(typeof(Localizer));
                using (TextWriter tw = new StreamWriter(""locals.resources."" + Language))
                {{    
                    xs.Serialize(tw, locals);
                }}
            }}
            catch(Exception ex)
            {{
                MessageBox.Show(""Error trying to load resource file. Message "" + ex.Message);
            }}
        }}

        /// <summary>
        ///     De-Serializes the language resource file.
        /// </summary>
        /// <returns>The language resource object returned form the XML Deserialization</returns>
        public Localizer Deserialize()
        {{
            if (!File.Exists(""locals.resources.""+Language)) return null;
            var xs = new XmlSerializer(typeof (Localizer));
            using (FileStream fs = File.Open(""locals.resources.""+Language, FileMode.Open))
            {{
                return xs.Deserialize(fs) as Localizer;
            }}
        }}
{1}
    }}
}}", namesp, ExpandVariables()));
#endregion

                File.WriteAllText(directoryName + "\\locals.resources.en", @"<?xml version=""1.0"" encoding=""utf-8""?>
<Localizer xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">" +
                                                         ExpandResources()
                                                         + "</Localizer>");

                string allText = File.ReadAllText(ofd.FileName);
                File.WriteAllText(ofd.FileName,
                                  allText.Insert(allText.IndexOf("<Compile", StringComparison.Ordinal), @"
    <Compile Include=""Localizer.cs"" />
    <Content Include=""locals.resources.en"">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>"));
                if (File.Exists(directoryName + "\\Program.cs"))
                {
                    string entry = File.ReadAllText(directoryName + "\\Program.cs");
                    int isert = entry.IndexOf("static void Main(", StringComparison.Ordinal);
                    File.WriteAllText(directoryName + "\\Program.cs", entry.Insert(entry.IndexOf("{", isert, StringComparison.Ordinal) + 1, @"
            Localizer.myLocalizer = new Localizer(""en"");
            Localizer.myLocalizer = Localizer.myLocalizer.Deserialize();
"));
                }
                MessageBox.Show(
                    "Your project has been localized successfully. Please verify that your project.",
                    "Localization Cmplete", MessageBoxButtons.OK, MessageBoxIcon.Information);
                buttonLoad.Text = "Load Project File";
                System.Diagnostics.Process.Start("explorer.exe", directoryName);
            }
        }

        internal string ExpandVariables()
        {
            string output = "";
            foreach (var v in variables)
            {
                output += string.Format("{0}//{1}{2}{0}public string {3};{2}", "        ", v.Value, Environment.NewLine, v.Key);
            }
            return output;
        }

        internal string ExpandResources()
        {
            string output = "";
            foreach (var v in variables)
            {
                output += string.Format(@"  <{0}>{1}</{0}>;", v.Key, v.Value) + Environment.NewLine;
            }
            return output;
        }

        private void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            string key = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString();
            variables[key] = dataGridView1.Rows[e.RowIndex].Cells[1].Value.ToString();
        }

        private void labelStatus_Click(object sender, EventArgs e)
        {
            buttonLoad.Text = "Load Project File";
        }
    }

    internal static class Utils
    {
        private static readonly bool[] BadCharValues;

        static Utils()
        {
            BadCharValues = new bool[char.MaxValue + 1];
            foreach (char c in @"[!@#$%^&~`(|)=+-<>?,._]*/\\;:{}'")
                BadCharValues[c] = true;
        }

        public static string CleanString(this string str)
        {
            var result = new StringBuilder(str.Length);
            for (int i = 0; i < str.Length; i++)
            {
                if (!BadCharValues[str[i]])
                    result.Append(str[i]);
            }
            return result.ToString();
        }
    }
}